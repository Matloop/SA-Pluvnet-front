import { Injectable, inject } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

// This interface should precisely match your EquipmentDTO from Spring Boot.
// It includes nested objects for address and owner details, which is a good practice.
export interface EquipmentDTO {
  id: number;
  name: string; // Corresponds to 'descricao' in your component
  ownerId: number;
  address: {
    id: number;
    cep: string;
    street: string;
    number: string;
    complement?: string;
    city: string;
    neighborhood: string; // This is 'bairro'
  };
  owner: {
      name: string;
      email: string;
  }
}

// This interface represents the payload for creating a new equipment.
// It omits IDs that are generated by the backend.
export interface CreateEquipmentPayload {
  name: string;
  ownerId: number;
  address: {
    cep: string;
    street: string;
    number: string;
    complement?: string;
    city: string;
    neighborhood: string;
  };
}


@Injectable({
  providedIn: 'root'
})
export class EquipmentService {
  private http = inject(HttpClient);
  private apiUrl = 'http://localhost:8080/equipments'; // Base URL for your equipment controller

  // GET /equipments/filters?ownerId=...
  getEquipmentsByOwnerId(ownerId: number): Observable<EquipmentDTO[]> {
    return this.http.get<EquipmentDTO[]>(`${this.apiUrl}/filters`, {
      params: { ownerId: ownerId.toString() }
    });
  }

  // POST /equipments
  createEquipment(payload: CreateEquipmentPayload): Observable<EquipmentDTO> {
    return this.http.post<EquipmentDTO>(this.apiUrl, payload);
  }

  // PUT /equipments/{id}
  updateEquipment(id: number, payload: CreateEquipmentPayload): Observable<EquipmentDTO> {
    return this.http.put<EquipmentDTO>(`${this.apiUrl}/${id}`, payload);
  }

  // DELETE /equipments/{id}
  deleteEquipment(id: number): Observable<void> {
    return this.http.delete<void>(`${this.apiUrl}/${id}`);
  }
}